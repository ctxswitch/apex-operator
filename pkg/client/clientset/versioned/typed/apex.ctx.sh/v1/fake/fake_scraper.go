/*
 * Copyright 2022 Rob Lyon <rob@ctxswitch.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	apexctxshv1 "ctx.sh/apex-operator/pkg/apis/apex.ctx.sh/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeScrapers implements ScraperInterface
type FakeScrapers struct {
	Fake *FakeApexV1
	ns   string
}

var scrapersResource = schema.GroupVersionResource{Group: "apex.ctx.sh", Version: "v1", Resource: "scrapers"}

var scrapersKind = schema.GroupVersionKind{Group: "apex.ctx.sh", Version: "v1", Kind: "Scraper"}

// Get takes name of the scraper, and returns the corresponding scraper object, and an error if there is any.
func (c *FakeScrapers) Get(ctx context.Context, name string, options v1.GetOptions) (result *apexctxshv1.Scraper, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(scrapersResource, c.ns, name), &apexctxshv1.Scraper{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apexctxshv1.Scraper), err
}

// List takes label and field selectors, and returns the list of Scrapers that match those selectors.
func (c *FakeScrapers) List(ctx context.Context, opts v1.ListOptions) (result *apexctxshv1.ScraperList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(scrapersResource, scrapersKind, c.ns, opts), &apexctxshv1.ScraperList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &apexctxshv1.ScraperList{ListMeta: obj.(*apexctxshv1.ScraperList).ListMeta}
	for _, item := range obj.(*apexctxshv1.ScraperList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested scrapers.
func (c *FakeScrapers) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(scrapersResource, c.ns, opts))

}

// Create takes the representation of a scraper and creates it.  Returns the server's representation of the scraper, and an error, if there is any.
func (c *FakeScrapers) Create(ctx context.Context, scraper *apexctxshv1.Scraper, opts v1.CreateOptions) (result *apexctxshv1.Scraper, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(scrapersResource, c.ns, scraper), &apexctxshv1.Scraper{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apexctxshv1.Scraper), err
}

// Update takes the representation of a scraper and updates it. Returns the server's representation of the scraper, and an error, if there is any.
func (c *FakeScrapers) Update(ctx context.Context, scraper *apexctxshv1.Scraper, opts v1.UpdateOptions) (result *apexctxshv1.Scraper, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(scrapersResource, c.ns, scraper), &apexctxshv1.Scraper{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apexctxshv1.Scraper), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeScrapers) UpdateStatus(ctx context.Context, scraper *apexctxshv1.Scraper, opts v1.UpdateOptions) (*apexctxshv1.Scraper, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(scrapersResource, "status", c.ns, scraper), &apexctxshv1.Scraper{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apexctxshv1.Scraper), err
}

// Delete takes name of the scraper and deletes it. Returns an error if one occurs.
func (c *FakeScrapers) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(scrapersResource, c.ns, name, opts), &apexctxshv1.Scraper{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeScrapers) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(scrapersResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &apexctxshv1.ScraperList{})
	return err
}

// Patch applies the patch and returns the patched scraper.
func (c *FakeScrapers) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apexctxshv1.Scraper, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(scrapersResource, c.ns, name, pt, data, subresources...), &apexctxshv1.Scraper{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apexctxshv1.Scraper), err
}
